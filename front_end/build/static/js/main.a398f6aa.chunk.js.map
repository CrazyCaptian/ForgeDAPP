{"version":3,"sources":["features/Header.tsx","pow.png","components/SliderInput.tsx","components/BalanceMsg.tsx","components/ConnectionRequiredMsg.tsx","features/yourWallet/StakeForm.tsx","hooks/useStakeTokens.ts","hooks/try3.ts","hooks/try4.ts","hooks/try.ts","hooks/try2.ts","features/yourWallet/WalletBalance.tsx","features/yourWallet/YourWallet.tsx","features/tokenFarmContract/Unstake.tsx","hooks/useStakingBalance.ts","hooks/useStakingBalance2.ts","hooks/useStakingBalance3.ts","hooks/useUnstakeTokens.ts","hooks/useUnstakeTokens2.ts","features/tokenFarmContract/TokenFarmContract.tsx","features/Main.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["useStyles","makeStyles","theme","container","padding","spacing","display","justifyContent","gap","Header","classes","useEthers","account","activateBrowserWallet","deactivate","isConnected","undefined","className","Button","color","variant","slice","onClick","inputsContainer","gridTemplateRows","gridTemplateColumns","slider","SliderInput","label","id","maxValue","value","onChange","disabled","rest","sliderStep","inputStep","sliderMarks","Typography","gutterBottom","Slider","step","event","newValue","max","marks","Input","margin","target","Number","onBlur","inputProps","min","type","alignItems","tokenImg","width","amount","fontWeight","BalanceMsg","tokenImgSrc","component","src","alt","justifyItems","ConnectionRequiredMsg","flexDirection","maxWidth","StakeForm","token","tokenAddress","address","name","tokenBalance","useTokenBalance","notifications","useNotifications","chainId","abi","TokenFarm","tokenFarmContractAddress","networkMapping","String","constants","AddressZero","tokenFarmInterface","utils","Interface","LPRewardAddress","Contract","rewardABI","LPFarm","LPFarmInterface","LPRewardsContract","useContractFunction","transactionName","stakeTokensSend","send","stakeTokensState","state","erc20Interface","Erc20","tokenContract","approveErc20Send","approveErc20State","useState","amountToStake","setAmountToStake","useEffect","status","setState","useStakeTokens","formattedTokenBalance","parseFloat","formatUnits","testabi","Mock","LPFarmInterface2","useStakeTokens6","stakeTokensSend6","useStakeTokens7","stakeTokensSend7","mock","useUnstakeTokens4","unstakeTokensSend","zeroAbi","Zero","xpw","console","log","useUnstakeTokens5","unstakeTokensSend2","faucet","amountAsWei","parseEther","toString","setAmount","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","handleCloseSnack","filter","notification","length","isMining","hasZeroBalance","hasZeroAmountSelected","dontshow","size","CircularProgress","Snackbar","open","autoHideDuration","onClose","Alert","severity","WalletBalance","image","tabContent","box","backgroundColor","borderRadius","header","YourWallet","supportedTokens","selectedTokenIndex","setSelectedTokenIndex","Box","TabContext","TabList","parseInt","map","index","Tab","TabPanel","contentContainer","Unstake","balance","useContractCall","method","args","useStakingBalance","balance2","useStakingBalance2","stake","useStakingBalance3","formattedBalance","useUnstakeTokens","unstakeTokensState","useUnstakeTokens2","unstakeTokensState2","handleUnstakeSubmit","handleUnstakeSubmit2","showUnstakeSuccess","setShowUnstakeSuccess","isMining2","TokenFarmContract","title","palette","common","white","textAlign","Main","error","networkName","helperConfig","brownieConfig","pow","showNetworkError","setShowNetworkError","handleCloseNetworkError","reason","root","App","DAppProvider","config","supportedChains","ChainId","Kovan","Rinkeby","expirationPeriod","checkInterval","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a398f6aa.chunk.js","sourcesContent":["import { Button, makeStyles } from \"@material-ui/core\"\nimport { useEthers } from \"@usedapp/core\"\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    padding: theme.spacing(4),\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    gap: theme.spacing(1)\n  },\n}))\n\nexport const Header = () => {\n  const classes = useStyles()\n\n  const { account, activateBrowserWallet, deactivate } = useEthers()\n\n  const isConnected = account !== undefined\n\n  return (\n    <div className={classes.container}>\n      {isConnected ? (\n        <>\n          <Button color=\"primary\" variant=\"contained\">\n            {`${account?.slice(0, 4)}...${account?.slice(-3)}`}\n          </Button>\n          <Button variant=\"contained\" onClick={deactivate}>\n            Disconnect\n          </Button>\n        </>\n      ) : (\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => activateBrowserWallet()}\n        >\n          Connect\n        </Button>\n      )}\n    </div>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/pow.fe810b33.png\";","import React from \"react\";\nimport { Slider, Input, Typography, makeStyles } from \"@material-ui/core\";\n\ninterface SliderInputProps {\n  label?: string;\n  id?: string;\n  maxValue: number;\n  value: number | string | (string | number)[];\n  onChange: (newValue: number | string | Array<number | string>) => void;\n  disabled?: boolean;\n  [x: string]: any;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  inputsContainer: {\n    display: \"grid\",\n    gap: theme.spacing(3),\n    gridTemplateRows: \"auto\",\n    gridTemplateColumns: \"1fr auto\",\n  },\n  slider: {},\n}));\n\nexport const SliderInput = ({\n  label = \"\",\n  id = \"input-slider\",\n  maxValue,\n  value,\n  onChange,\n  disabled = false,\n  ...rest\n}: SliderInputProps) => {\n  const handleSliderChange = (event: any, newValue: number | number[]) => {\n    onChange(newValue);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.value === \"\" ? \"\" : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      onChange(0);\n    } else if (value > maxValue) {\n      onChange(maxValue);\n    }\n  };\n\n  const sliderStep = maxValue / 100;\n  const inputStep = maxValue / 50;\n\n  const classes = useStyles();\n\n  const sliderMarks = [\n    {\n      value: 0,\n      label: \"0%\",\n    },\n    {\n      value: maxValue,\n      label: \"100%\",\n    },\n  ];\n\n  // ... is a \"Spread\" operator\n  // standard javascript thing\n  // works on iterables\n  // expands a list\n  return (\n    <div {...rest}>\n      {label && (\n        <Typography id={id} gutterBottom>\n          {label}\n        </Typography>\n      )}\n      <div className={classes.inputsContainer}>\n        <div>\n          <Slider\n            value={typeof value === \"number\" ? value : 0}\n            step={sliderStep}\n            onChange={handleSliderChange}\n            aria-labelledby={id}\n            max={maxValue}\n            disabled={disabled}\n            marks={disabled ? [] : sliderMarks}\n          />\n        </div>\n        <div>\n          <Input\n            value={value}\n            margin=\"dense\"\n            onChange={handleInputChange}\n            onBlur={handleBlur}\n            disabled={disabled}\n            inputProps={{\n              step: inputStep,\n              min: 0,\n              max: maxValue,\n              type: \"number\",\n              \"aria-labelledby\": id,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\"\nimport { Typography, makeStyles } from \"@material-ui/core\"\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\"\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    }\n}))\n\ninterface BalanceMsgProps {\n    label: string;\n    amount: number;\n    tokenImgSrc: string\n}\n\nexport const BalanceMsg = ({ label, amount, tokenImgSrc }: BalanceMsgProps) => {\n\n    const classes = useStyles()\n\n    return <div className={classes.container}>\n        <Typography component=\"span\">{label}:</Typography>\n        <Typography className={classes.amount} component=\"span\">{amount}</Typography>\n        <img className={classes.tokenImg} src={tokenImgSrc} alt=\"token logo\" />\n    </div>\n}","import React from \"react\";\nimport { Typography, makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"grid\",\n    alignItems: \"center\",\n    justifyItems: \"center\",\n    gridTemplateRows: \"150px\"\n  },\n}));\n\nexport const ConnectionRequiredMsg = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <Typography variant=\"h6\" component=\"span\">\n        Please connect your Metamask account\n      </Typography>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\"\nimport { SliderInput } from \"../../components\"\nimport { useEthers, useTokenBalance, useNotifications, addressEqual } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useStakeTokens, useStakeTokens2, useStakeTokens6, useStakeTokens7, useUnstakeTokens2, useUnstakeTokens4, useUnstakeTokens5 } from \"../../hooks\"\nimport { utils } from \"ethers\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport \"../../App.css\"\n\n// This is the typescript way of saying this compent needs this type\nexport interface StakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(2),\n    width: \"100%\",\n  },\n  slider: {\n    width: \"100%\",\n    maxWidth: \"400px\",\n  },\n}))\n\n// token is getting passed in as a prop\n// in the ping brackets is an object/variable \n// That object is of the shape StakeFormProps\nexport const StakeForm = ({ token }: StakeFormProps) => {\n  const { address: tokenAddress, name } = token\n\n  const { account } = useEthers()\n  const tokenBalance = useTokenBalance(tokenAddress, account)\n  const { notifications } = useNotifications()\n\n  const classes = useStyles()\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useStakeTokens(tokenAddress)\n\n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return stakeTokensSend(amountAsWei.toString())\n  }\n\n\n  //sets up LPRewards to run\n\n  const { send: stakeTokensSend6, state: stakeTokensState5 } =\n    useStakeTokens6(tokenAddress)\n\n  const rewardStart = () => {\n    return stakeTokensSend6()\n  }\n\n  const { send: stakeTokensSend7, state: stakeTokensState6 } =\n    useStakeTokens7(tokenAddress)\n\n  const rewardStart2 = () => {\n    return stakeTokensSend7()\n  }\n  //lp run done\n\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n  useUnstakeTokens4(tokenAddress)\n\n\n    const { send: unstakeTokensSend2, state: unstakeTokensState2 } =\n    useUnstakeTokens5(tokenAddress)\n\n  const faucet = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend(amountAsWei.toString())\n  }\n\n  const faucet2 = () => {\n    const amountAsWei = utils.parseEther(amount.toString())\n    return unstakeTokensSend2(amountAsWei.toString())\n  }\n\n  const [amount, setAmount] =\n    useState<number | string | Array<number | string>>(0)\n\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] =\n    useState(false)\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n    showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Approve ERC20 transfer\"\n      ).length > 0\n    ) {\n      !showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(true)\n      showStakeTokensSuccess && setShowStakeTokensSuccess(false)\n    }\n\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Stake tokens\"\n      ).length > 0\n    ) {\n      showErc20ApprovalSuccess && setShowErc20ApprovalSuccess(false)\n      !showStakeTokensSuccess && setShowStakeTokensSuccess(true)\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n  const isMining = stakeTokensState.status === \"Mining\"\n\n  const hasZeroBalance = formattedTokenBalance === 0\n  const hasZeroAmountSelected = parseFloat(amount.toString()) === 0\n  var dontshow = true\n  //LP addy\n  if(token.address === \"0x9B3cb1F05B24a4227EF55ad48F5aBf67E4d05340\")\n{\n  dontshow = false\n}\nif(token.address !== \"0x9B3cb1F05B24a4227EF55ad48F5aBf67E4d05340\")\n{\n  if(token.address === \"0xd7D81bf3cC94439B75C06569F099dEbc33c3EC02\")\n  {\n\n    return (\n      <>\n      <div className={classes.container}>\n      <SliderInput\n            label={`Stake ${name}`}\n            maxValue={formattedTokenBalance}\n            id={`slider-input-${name}`}\n            className={classes.slider}\n            value={amount}\n            onChange={setAmount}\n            disabled={isMining || hasZeroBalance}\n          />\n      <Button\n            color=\"primary\"\n            variant=\"contained\"\n            size=\"large\"\n            onClick={faucet2}\n            disabled={isMining || hasZeroAmountSelected}\n          >\n            {isMining ? <CircularProgress size={26} /> : \"Get Test Tokens\"}\n          </Button>\n      </div>\n      </>\n      )\n  }\n  else\n  {\n  return (\n    <>\n    <div className={classes.container}>\n    <SliderInput\n          label={`Stake ${name}`}\n          maxValue={formattedTokenBalance}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance}\n        />\n    <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={faucet}\n          disabled={isMining || hasZeroAmountSelected}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Get Test Tokens\"}\n        </Button>\n    </div>\n    </>\n    )\n}}\n  return (\n    <>\n      <div className={classes.container}>\n        <SliderInput\n          label={`Stake ${name}`}\n          maxValue={formattedTokenBalance}\n          id={`slider-input-${name}`}\n          className={classes.slider}\n          value={amount}\n          onChange={setAmount}\n          disabled={isMining || hasZeroBalance || dontshow}\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleStakeSubmit}\n          disabled={isMining || hasZeroAmountSelected || dontshow}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Stake\"}\n        </Button>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={faucet}\n          disabled={isMining || hasZeroAmountSelected}\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Get Test Tokens\"}\n        </Button>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={rewardStart}\n          disabled={isMining }\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Start a 60 second reward Period for the LP Reward Pool\"}\n        </Button>        \n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={rewardStart2}\n          disabled={isMining }\n        >\n          {isMining ? <CircularProgress size={26} /> : \"Start a 60 second reward Period for the LP Reward Pool\"}\n        </Button>\n      </div>\n      <Snackbar\n        open={showErc20ApprovalSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          ERC-20 token transfer approved successfully! Now approve the 2nd tx to\n          initiate the staking transfer.\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={showStakeTokensSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens staked successfully!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport Erc20 from \"../chain-info/ERC20.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\n/**\n * This hook is a bit messy but exposes a 'send' which makes two transactions.\n * The first transaction is to approve the ERC-20 token transfer on the token's contract.\n * Upon successful approval, a second transaction is initiated to execute the transfer by the TokenFarm contract.\n * The 'state' returned by this hook is the state of the first transaction until that has status \"Succeeded\".\n * After that it is the state of the second transaction.\n * @param tokenAddress - The token address of the token we wish to stake\n */\nexport const useStakeTokens = (tokenAddress: string) => {\n  const { chainId } = useEthers()\n  const { abi } = TokenFarm\n  const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n\n  const tokenFarmInterface = new utils.Interface(abi)\n\n  const tokenFarmContract = new Contract(\n    tokenFarmContractAddress,\n    tokenFarmInterface\n  )\n//MEME ACTUAL USING LP Contract\nconst LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\nconst rewardABI = LPFarm.abi\nconst LPFarmInterface = new utils.Interface(rewardABI)\nconst LPRewardsContract = new Contract(\n  LPRewardAddress, LPFarmInterface\n)\n\n  const { send: stakeTokensSend, state: stakeTokensState } =\n    useContractFunction(LPRewardsContract, \"stake\", {\n      transactionName: \"Stake tokens\",\n    })\n\n  const erc20Interface = new utils.Interface(Erc20.abi)\n\n  const tokenContract = new Contract(tokenAddress, erc20Interface)\n\n  const { send: approveErc20Send, state: approveErc20State } =\n    useContractFunction(tokenContract, \"approve\", {\n      transactionName: \"Approve ERC20 transfer\",\n    })\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      stakeTokensSend(amountToStake)\n    }\n    // the dependency arry\n    // the code inside the useEffect anytime\n    // anything in this list changes\n    // if you want something to run when the component first runs\n    // you just have a blank list\n  }, [approveErc20State, amountToStake, tokenAddress]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const send = (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(LPRewardAddress, amount)\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n    if (approveErc20State.status === \"Success\") {\n      setState(stakeTokensState)\n    } else {\n      setState(approveErc20State)\n    }\n  }, [approveErc20State, stakeTokensState])\n\n  return { send, state }\n}\n","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock from \"../chain-info/AMock.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useStakeTokens6 = (tokenAddress: string) => {\n  const LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  const testabi = Mock.abi\n\n  const LPFarmInterface2 = new utils.Interface(testabi)\n  const mock = new Contract(\n      tokenAddress, LPFarmInterface2\n  )\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(LPRewardsContract, \"setRewardParams0xBTC\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  \n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const send = ()  => {\n    return approveErc20Send(\"4\", \"4\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock from \"../chain-info/AMock.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useStakeTokens7 = (tokenAddress: string) => {\n  const LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  const testabi = Mock.abi\n\n  const LPFarmInterface2 = new utils.Interface(testabi)\n  const mock = new Contract(\n      tokenAddress, LPFarmInterface2\n  )\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(LPRewardsContract, \"setRewardParams0xPW\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n  \n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const send = ()  => {\n    return approveErc20Send(\"4\", \"4\")\n  }\n\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock from \"../chain-info/AMock.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens4 = (tokenAddress: string) => {\n  const LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  const testabi = Mock.abi\n\n  const LPFarmInterface2 = new utils.Interface(testabi)\n  const mock = new Contract(\n      tokenAddress, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(mock, \"withdrawToken\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(amount)\n  }\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import { useEffect, useState } from \"react\"\nimport { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport Mock from \"../chain-info/AMock.json\"\nimport Zero from \"../chain-info/ProofOfWork.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens5 = (tokenAddress: string) => {\n\n  const zeroxBtcAddress = \"0xd7D81bf3cC94439B75C06569F099dEbc33c3EC02\"\n  const zeroAbi = Zero.abi\n\n  const LPFarmInterface2 = new utils.Interface(zeroAbi)\n\n  const xpw = new Contract(\n      tokenAddress, LPFarmInterface2\n  )\n\n  const [amountToStake, setAmountToStake] = useState(\"0\")\n\n  const { send: approveErc20Send, state: approveErc20State } =\n  useContractFunction(xpw, \"AOpenMint\", {\n    transactionName: \"Approve ERC20 transfer\",\n  })\n\n  const send =  (amount: string) => {\n    setAmountToStake(amount)\n    return approveErc20Send(true, true)\n  }\n  console.log(tokenAddress)\n  const [state, setState] = useState(approveErc20State)\n\n  useEffect(() => {\n      setState(approveErc20State)\n\n  }, [approveErc20State])\n  return { send, state }\n}","import React from \"react\";\nimport { Token } from \"../Main\";\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components\";\n\nexport interface WalletBalanceProps {\n  token: Token;\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n  const { image, address, name } = token;\n\n  const { account } = useEthers();\n  const tokenBalance = useTokenBalance(address, account);\n\n  const formattedTokenBalance: number = tokenBalance\n    ? parseFloat(formatUnits(tokenBalance, 18))\n    : 0;\n\n  return (\n    <BalanceMsg\n      label={`Your un-staked ${name} balance`}\n      amount={formattedTokenBalance}\n      tokenImgSrc={image}\n    />\n  );\n};\n","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { StakeForm } from \"./StakeForm\"\nimport { Tab, makeStyles, Box } from \"@material-ui/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg\n} from \"../../components\"\nimport { Token } from \"../Main\"\nimport { WalletBalance } from \"./WalletBalance\"\n\ninterface YourWalletProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n  // wtf is this? \n  // Reacts way of holding state between components \n  // Could do it without <number> \n  // saving state between renders of components \n  // You'd have to pass it through as a prop to have another component use it \n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  const classes = useStyles()\n\n  return (\n    <Box>\n      <h1 className={classes.header}>Your Wallet</h1>\n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <div className={classes.tabContent}>\n                      <WalletBalance\n                        token={supportedTokens[selectedTokenIndex]}\n                      />\n                      {/* this is the same as */}\n                      {/* The chainlink_defi props passing */}\n                      <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                    </div>\n                  </TabPanel>\n                )\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}","import React, { useState, useEffect } from \"react\"\nimport {\n  Button,\n  CircularProgress,\n  Snackbar,\n  makeStyles,\n} from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { useUnstakeTokens, useStakingBalance, useStakingBalance2, useUnstakeTokens2, useStakingBalance3 } from \"../../hooks\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../../components\"\n\nexport interface UnstakeFormProps {\n  token: Token\n}\n\nconst useStyles = makeStyles((theme) => ({\n  contentContainer: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    gap: theme.spacing(2),\n  },\n}))\n\nexport const Unstake = ({ token }: UnstakeFormProps) => {\n  const { image, address: tokenAddress, name } = token\n\n  const { notifications } = useNotifications()\n\n  var balance = useStakingBalance(tokenAddress)\n  const balance2 = useStakingBalance2(tokenAddress)\n  const stake = useStakingBalance3(tokenAddress)\n  if(token.address === \"0xd7D81bf3cC94439B75C06569F099dEbc33c3EC02\")\n  {\n    balance = balance2\n\n  }\n  if(token.address === \"0x9B3cb1F05B24a4227EF55ad48F5aBf67E4d05340\")\n  {\n      balance = stake\n  }\n  const formattedBalance: number = balance\n  ? parseFloat(formatUnits(balance, 18))\n  : 0\n\n  const { send: unstakeTokensSend, state: unstakeTokensState } =\n    useUnstakeTokens()\n\n\n    const { send: unstakeTokensSend2, state: unstakeTokensState2 } =\n      useUnstakeTokens2()\n\n  const handleUnstakeSubmit = () => {\n    return unstakeTokensSend()\n  }\n\n  const handleUnstakeSubmit2 = () => {\n    return unstakeTokensSend2()\n  }\n\n  const [showUnstakeSuccess, setShowUnstakeSuccess] = useState(false)\n\n  const handleCloseSnack = () => {\n    showUnstakeSuccess && setShowUnstakeSuccess(false)\n  }\n\n  useEffect(() => {\n    if (\n      notifications.filter(\n        (notification) =>\n          notification.type === \"transactionSucceed\" &&\n          notification.transactionName === \"Unstake tokens\"\n      ).length > 0\n    ) {\n      !showUnstakeSuccess && setShowUnstakeSuccess(true)\n    }\n  }, [notifications, showUnstakeSuccess])\n\n  const isMining = unstakeTokensState.status === \"Mining\"\n\n  const isMining2 = unstakeTokensState2.status === \"Mining\"\n\n  const classes = useStyles()\n\nif(token.address !== \"0x9B3cb1F05B24a4227EF55ad48F5aBf67E4d05340\")\n{\nreturn (\n  <>\n    <div className={classes.contentContainer}>\n      <BalanceMsg\n        label={`Your Rewards = ${name} balance`}\n        amount={formattedBalance}\n        tokenImgSrc={image}\n      />\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit}\n        disabled={isMining}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Get Rewards Only`}\n      </Button>        <Button\n        color=\"primary\"\n        variant=\"contained\"\n        size=\"large\"\n        onClick={handleUnstakeSubmit2}\n        disabled={isMining2}\n      >\n        {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward`}\n      </Button>\n    </div>\n    <Snackbar\n      open={showUnstakeSuccess}\n      autoHideDuration={5000}\n      onClose={handleCloseSnack}\n    >\n      <Alert onClose={handleCloseSnack} severity=\"success\">\n        Tokens unstaked successfully!\n      </Alert>\n    </Snackbar>\n  </>\n)\n}\n\n\n\n  return (\n    <>\n      <div className={classes.contentContainer}>\n        <BalanceMsg\n          label={`Your staked ${name} balance`}\n          amount={formattedBalance}\n          tokenImgSrc={image}\n        />\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit}\n          disabled={isMining}\n        >\n          {isMining ? <CircularProgress size={26} /> : `Get Rewards Only`}\n        </Button>        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          size=\"large\"\n          onClick={handleUnstakeSubmit2}\n          disabled={isMining2}\n        >\n          {isMining ? <CircularProgress size={26} /> : `Exit - Withdraw Stake and Reward`}\n        </Button>\n      </div>\n      <Snackbar\n        open={showUnstakeSuccess}\n        autoHideDuration={5000}\n        onClose={handleCloseSnack}\n      >\n        <Alert onClose={handleCloseSnack} severity=\"success\">\n          Tokens unstaked successfully!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance = (address: string): BigNumber | undefined => {\n  const { account } = useEthers()\n\n  //const { abi } = TokenFarm\n  //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n\n  //const tokenFarmInterface = new utils.Interface(abi)\n\n  //MY STUFF\n  const LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n\n\n  \n\n  const [stakingBalance] =\n    useContractCall({\n      abi: LPFarmInterface,\n      address: LPRewardAddress,\n      method: \"earned\",\n      args: [account],\n    }) ?? []\n\n  return stakingBalance\n}\n","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance2 = (address: string): BigNumber | undefined => {\n    const { account } = useEthers()\n\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n    //MY STUFF\n    const LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"earned2\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractCall, useEthers } from \"@usedapp/core\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\n\n/**\n * Get the staking balance of a certain token by the user in our TokenFarm contract\n * @param address - The contract address of the token\n */\nexport const useStakingBalance3 = (address: string): BigNumber | undefined => {\n    const { account } = useEthers()\n\n    //const { abi } = TokenFarm\n    //const tokenFarmContractAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n  \n    //const tokenFarmInterface = new utils.Interface(abi)\n  \n    //MY STUFF\n    const LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n  \n  \n    \n  \n    const [stakingBalance] =\n      useContractCall({\n        abi: LPFarmInterface,\n        address: LPRewardAddress,\n        method: \"balanceOf\",\n        args: [account],\n      }) ?? []\n  \n    return stakingBalance\n  }","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\n/**\n * Expose { send, state } object to facilitate unstaking the user's tokens from the TokenFarm contract\n */\nexport const useUnstakeTokens = () => {\n  const LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\n  const rewardABI = LPFarm.abi\n  const LPFarmInterface = new utils.Interface(rewardABI)\n  const LPRewardsContract = new Contract(\n    LPRewardAddress, LPFarmInterface\n  )\n  \n\n\n\n  return useContractFunction(LPRewardsContract, \"getReward\", {\n    transactionName: \"Unstake tokens\",\n  })\n}\n","import { useContractFunction, useEthers } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/TokenFarm.json\"\nimport { utils, constants } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/map.json\"\nimport LPFarm from \"../chain-info/NyanRewards.json\"\n\nexport const useUnstakeTokens2 = () => {\n    const LPRewardAddress = \"0xe37CC8825D7A6AA0D40979d01E94A193c17cE4A0\"\n    const rewardABI = LPFarm.abi\n    const LPFarmInterface = new utils.Interface(rewardABI)\n    const LPRewardsContract = new Contract(\n      LPRewardAddress, LPFarmInterface\n    )\n    \n  \n\n    return useContractFunction(LPRewardsContract, \"exit\", {\n        transactionName: \"Unstake tokens\",\n      })\n  }","import React, { useState } from \"react\"\nimport { useEthers } from \"@usedapp/core\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport {\n  ConnectionRequiredMsg,\n} from \"../../components\"\nimport { Tab, Box, makeStyles } from \"@material-ui/core\"\nimport { Token } from \"../Main\"\nimport { Unstake } from \"./Unstake\"\n\ninterface TokenFarmContractProps {\n  supportedTokens: Array<Token>\n}\n\nconst useStyles = makeStyles((theme) => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(4),\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n    margin: `${theme.spacing(4)}px 0`,\n    padding: theme.spacing(2),\n  },\n  header: {\n    color: \"white\"\n  }\n}))\n\n\nexport const TokenFarmContract = ({\n  supportedTokens,\n}: TokenFarmContractProps) => {\n  const classes = useStyles()\n  const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n    setSelectedTokenIndex(parseInt(newValue))\n  }\n\n  const { account } = useEthers()\n\n  const isConnected = account !== undefined\n\n  return (\n    <Box>\n      <h1 className={classes.header}>The TokenFarm Contract</h1>\n      <Box className={classes.box}>\n        <div>\n          {isConnected ? (\n            <TabContext value={selectedTokenIndex.toString()}>\n              <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                {supportedTokens.map((token, index) => {\n                  return (\n                    <Tab\n                      label={token.name}\n                      value={index.toString()}\n                      key={index}\n                    />\n                  )\n                })}\n              </TabList>\n              {supportedTokens.map((token, index) => {\n                return (\n                  <TabPanel value={index.toString()} key={index}>\n                    <Unstake token={token} />\n                  </TabPanel>\n                )\n              })}\n            </TabContext>\n          ) : (\n            <ConnectionRequiredMsg />\n          )}\n        </div>\n      </Box>\n    </Box>\n  )\n}\n","/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport React, { useEffect, useState } from \"react\"\nimport eth from \"../eth.png\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport pow from \"../pow.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { TokenFarmContract } from \"./tokenFarmContract\"\nimport { useEthers } from \"@usedapp/core\"\nimport { constants } from \"ethers\"\n//import DappToken from \"../chain-info/DappToken.json\"\nimport { Snackbar, Typography, makeStyles } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport networkMapping from \"../chain-info/map.json\"\nimport brownieConfig from \"../brownie-config-json.json\"\nimport helperConfig from \"../helper-config.json\"\n\nexport type Token = {\n  image: string\n  address: string\n  name: string\n}\n\n// Why not in a css folder? \n// For material UI\n// https://material-ui.com/styles/basics/\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    color: theme.palette.common.white,\n    textAlign: \"center\",\n    padding: theme.spacing(4),\n  },\n}))\n\n\nexport const Main = () => {\n  const { chainId, error } = useEthers()\n\n  const classes = useStyles()\n  const networkName = chainId ? helperConfig[chainId] : \"ganache\"\n  console.log(typeof chainId)\n  // We need to pull the DAPP token address from the .json file written to by Brownie\n  const dappTokenAddress = chainId ? networkMapping[String(chainId)][\"DappToken\"][0] : constants.AddressZero\n  const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero\n  const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n  // console.log(dappTokenAddress)\n  /**\n   * Our single central location to store info on support tokens.\n   * This is the only place you'll need to add a new token to get it to display in the UI!\n   * \n   * Modularize the addresses like with `dappTokenAddress`\n   * To make it chain agnostic\n   */\n  const supportedTokens: Array<Token> = [\n    {\n      image: pow,\n      address: \"0x9B3cb1F05B24a4227EF55ad48F5aBf67E4d05340\",\n      name: \"LP LP LP\",\n    },\n    {\n      image: pow,\n      address: \"0xd7D81bf3cC94439B75C06569F099dEbc33c3EC02\",\n      name: \"0xPW\",\n    },\n    {\n      image: pow,\n      address: \"0xdacb64045cb79c4fe2187d85BDC15aae81D82311\",\n      name: \"MOCK 0xBTC\",\n    },\n  ]\n\n  const [showNetworkError, setShowNetworkError] = useState(false)\n\n  const handleCloseNetworkError = (\n    event: React.SyntheticEvent | React.MouseEvent,\n    reason?: string\n  ) => {\n    if (reason === \"clickaway\") {\n      return\n    }\n\n    showNetworkError && setShowNetworkError(false)\n  }\n\n  /**\n   * useEthers will return a populated 'error' field when something has gone wrong.\n   * We can inspect the name of this error and conditionally show a notification\n   * that the user is connected to the wrong network.\n   */\n  useEffect(() => {\n    if (error && error.name === \"UnsupportedChainIdError\") {\n      !showNetworkError && setShowNetworkError(true)\n    } else {\n      showNetworkError && setShowNetworkError(false)\n    }\n  }, [error, showNetworkError])\n\n  return (\n    <>\n      <Typography\n        variant=\"h2\"\n        component=\"h1\"\n        classes={{\n          root: classes.title,\n        }}\n      >\n        Dapp Token Farm\n      </Typography>\n      <YourWallet supportedTokens={supportedTokens} />\n      <TokenFarmContract supportedTokens={supportedTokens} />\n      <Snackbar\n        open={showNetworkError}\n        autoHideDuration={5000}\n        onClose={handleCloseNetworkError}\n      >\n        <Alert onClose={handleCloseNetworkError} severity=\"warning\">\n          You gotta connect to the Kovan or Rinkeby network!\n        </Alert>\n      </Snackbar>\n    </>\n  )\n}\n","import React from \"react\"\nimport { Header } from \"./features/Header\"\nimport { Main } from \"./features/Main\"\nimport { ChainId, DAppProvider } from \"@usedapp/core\"\nimport { Container } from \"@material-ui/core\"\n\nexport const App = () => {\n  return (\n    <DAppProvider config={{\n      supportedChains: [ChainId.Kovan, ChainId.Rinkeby],\n      notifications: {\n        expirationPeriod: 1000,\n        checkInterval: 1000\n      }\n    }}>\n      <Header />\n      <Container maxWidth=\"md\">\n        <Main />\n      </Container>\n    </DAppProvider>\n  )\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}